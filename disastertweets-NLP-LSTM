{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":17777,"databundleVersionId":869809,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T12:54:18.128638Z","iopub.execute_input":"2025-09-04T12:54:18.128991Z","iopub.status.idle":"2025-09-04T12:54:18.496807Z","shell.execute_reply.started":"2025-09-04T12:54:18.128960Z","shell.execute_reply":"2025-09-04T12:54:18.495523Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/nlp-getting-started/sample_submission.csv\n/kaggle/input/nlp-getting-started/train.csv\n/kaggle/input/nlp-getting-started/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"traindf=pd.read_csv('/kaggle/input/nlp-getting-started/train.csv')\ntraindf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T12:54:18.497973Z","iopub.execute_input":"2025-09-04T12:54:18.498633Z","iopub.status.idle":"2025-09-04T12:54:18.581246Z","shell.execute_reply.started":"2025-09-04T12:54:18.498596Z","shell.execute_reply":"2025-09-04T12:54:18.580307Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text  \\\n0   1     NaN      NaN  Our Deeds are the Reason of this #earthquake M...   \n1   4     NaN      NaN             Forest fire near La Ronge Sask. Canada   \n2   5     NaN      NaN  All residents asked to 'shelter in place' are ...   \n3   6     NaN      NaN  13,000 people receive #wildfires evacuation or...   \n4   7     NaN      NaN  Just got sent this photo from Ruby #Alaska as ...   \n\n   target  \n0       1  \n1       1  \n2       1  \n3       1  \n4       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Our Deeds are the Reason of this #earthquake M...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Forest fire near La Ronge Sask. Canada</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>All residents asked to 'shelter in place' are ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>13,000 people receive #wildfires evacuation or...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"traindf.drop(['id','keyword','location'],axis=1,inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T13:14:59.479404Z","iopub.execute_input":"2025-09-04T13:14:59.480230Z","iopub.status.idle":"2025-09-04T13:14:59.491684Z","shell.execute_reply.started":"2025-09-04T13:14:59.480201Z","shell.execute_reply":"2025-09-04T13:14:59.490706Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"x=traindf.text\ny=traindf.target","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T13:15:13.089365Z","iopub.execute_input":"2025-09-04T13:15:13.089709Z","iopub.status.idle":"2025-09-04T13:15:13.094577Z","shell.execute_reply.started":"2025-09-04T13:15:13.089680Z","shell.execute_reply":"2025-09-04T13:15:13.093630Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import LSTM, Embedding, Dense, Dropout","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T13:18:00.417116Z","iopub.execute_input":"2025-09-04T13:18:00.417424Z","iopub.status.idle":"2025-09-04T13:18:00.425393Z","shell.execute_reply.started":"2025-09-04T13:18:00.417403Z","shell.execute_reply":"2025-09-04T13:18:00.424384Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"maxlen=50\nvocabsize=10000","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T13:21:15.435204Z","iopub.execute_input":"2025-09-04T13:21:15.436130Z","iopub.status.idle":"2025-09-04T13:21:15.440358Z","shell.execute_reply.started":"2025-09-04T13:21:15.436097Z","shell.execute_reply":"2025-09-04T13:21:15.439201Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"tk=Tokenizer(num_words=vocabsize)\ntk.fit_on_texts(x)\nxv=tk.texts_to_sequences(x)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T13:26:11.909320Z","iopub.execute_input":"2025-09-04T13:26:11.909664Z","iopub.status.idle":"2025-09-04T13:26:12.216200Z","shell.execute_reply.started":"2025-09-04T13:26:11.909638Z","shell.execute_reply":"2025-09-04T13:26:12.215178Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"xpad=pad_sequences(xv,maxlen=maxlen)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T13:26:52.788296Z","iopub.execute_input":"2025-09-04T13:26:52.788603Z","iopub.status.idle":"2025-09-04T13:26:52.818438Z","shell.execute_reply.started":"2025-09-04T13:26:52.788580Z","shell.execute_reply":"2025-09-04T13:26:52.817468Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"model=Sequential([\n    Embedding(vocabsize,128,input_length=maxlen),\n    LSTM(64,return_sequences=True),\n    LSTM(32),\n    Dropout(0.2),\n    Dense(1,activation='sigmoid')\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T13:30:52.711440Z","iopub.execute_input":"2025-09-04T13:30:52.711778Z","iopub.status.idle":"2025-09-04T13:30:52.772483Z","shell.execute_reply.started":"2025-09-04T13:30:52.711753Z","shell.execute_reply":"2025-09-04T13:30:52.771664Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n  warnings.warn(\n2025-09-04 13:30:52.723197: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"model.compile('adam','binary_crossentropy',metrics=['accuracy'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T13:32:04.326307Z","iopub.execute_input":"2025-09-04T13:32:04.326617Z","iopub.status.idle":"2025-09-04T13:32:04.348721Z","shell.execute_reply.started":"2025-09-04T13:32:04.326597Z","shell.execute_reply":"2025-09-04T13:32:04.348016Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T13:32:12.622548Z","iopub.execute_input":"2025-09-04T13:32:12.622927Z","iopub.status.idle":"2025-09-04T13:32:12.640607Z","shell.execute_reply.started":"2025-09-04T13:32:12.622901Z","shell.execute_reply":"2025-09-04T13:32:12.639772Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm (\u001b[38;5;33mLSTM\u001b[0m)                     │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_1 (\u001b[38;5;33mLSTM\u001b[0m)                   │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                     │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"history=model.fit(xpad,y,epochs=10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T13:33:22.951674Z","iopub.execute_input":"2025-09-04T13:33:22.952012Z","iopub.status.idle":"2025-09-04T13:35:23.738869Z","shell.execute_reply.started":"2025-09-04T13:33:22.951988Z","shell.execute_reply":"2025-09-04T13:35:23.737869Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 47ms/step - accuracy: 0.6827 - loss: 0.5842\nEpoch 2/10\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 48ms/step - accuracy: 0.8761 - loss: 0.3200\nEpoch 3/10\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 48ms/step - accuracy: 0.9125 - loss: 0.2317\nEpoch 4/10\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 48ms/step - accuracy: 0.9393 - loss: 0.1726\nEpoch 5/10\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 48ms/step - accuracy: 0.9517 - loss: 0.1311\nEpoch 6/10\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 49ms/step - accuracy: 0.9622 - loss: 0.0905\nEpoch 7/10\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 48ms/step - accuracy: 0.9686 - loss: 0.0748\nEpoch 8/10\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 48ms/step - accuracy: 0.9748 - loss: 0.0593\nEpoch 9/10\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 48ms/step - accuracy: 0.9799 - loss: 0.0475\nEpoch 10/10\n\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 48ms/step - accuracy: 0.9790 - loss: 0.0440\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"testdf=pd.read_csv('/kaggle/input/nlp-getting-started/test.csv')\ntestdf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:24:04.551445Z","iopub.execute_input":"2025-09-04T14:24:04.551930Z","iopub.status.idle":"2025-09-04T14:24:04.581457Z","shell.execute_reply.started":"2025-09-04T14:24:04.551869Z","shell.execute_reply":"2025-09-04T14:24:04.580623Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text\n0   0     NaN      NaN                 Just happened a terrible car crash\n1   2     NaN      NaN  Heard about #earthquake is different cities, s...\n2   3     NaN      NaN  there is a forest fire at spot pond, geese are...\n3   9     NaN      NaN           Apocalypse lighting. #Spokane #wildfires\n4  11     NaN      NaN      Typhoon Soudelor kills 28 in China and Taiwan","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Just happened a terrible car crash</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Heard about #earthquake is different cities, s...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>there is a forest fire at spot pond, geese are...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Apocalypse lighting. #Spokane #wildfires</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Typhoon Soudelor kills 28 in China and Taiwan</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"ids=testdf['id']\ntestdf.drop(['id','keyword','location'],axis=1,inplace=True)\ntest=tk.texts_to_sequences(testdf['text'])\ntest=pad_sequences(test,maxlen=maxlen)\ntargets=model.predict(test)\ntargets=(targets>0.5).astype(int).flatten()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:24:07.852813Z","iopub.execute_input":"2025-09-04T14:24:07.853705Z","iopub.status.idle":"2025-09-04T14:24:09.546448Z","shell.execute_reply.started":"2025-09-04T14:24:07.853677Z","shell.execute_reply":"2025-09-04T14:24:09.545556Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m102/102\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 15ms/step\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"submission=pd.DataFrame({\n    'id':ids,\n    'target':targets.flatten()\n})\nsubmission.to_csv('submission.csv',index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T14:26:02.512774Z","iopub.execute_input":"2025-09-04T14:26:02.513206Z","iopub.status.idle":"2025-09-04T14:26:02.522704Z","shell.execute_reply.started":"2025-09-04T14:26:02.513175Z","shell.execute_reply":"2025-09-04T14:26:02.521864Z"}},"outputs":[],"execution_count":24}]}